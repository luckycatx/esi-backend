// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (username, email, pwd)
VALUES (?, ?, ?)
`

type CreateUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Pwd      string `json:"pwd"`
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) error {
	_, err := q.exec(ctx, q.createUserStmt, createUser, arg.Username, arg.Email, arg.Pwd)
	return err
}

const fetchUsers = `-- name: FetchUsers :many
SELECT id, username, email, pwd, created_at, updated_at, is_deleted
FROM users
ORDER BY id
`

func (q *Queries) FetchUsers(ctx context.Context) ([]*User, error) {
	rows, err := q.query(ctx, q.fetchUsersStmt, fetchUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Pwd,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, pwd, created_at, updated_at, is_deleted
FROM users
WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Pwd,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return &i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, pwd, created_at, updated_at, is_deleted
FROM users
WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (*User, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Pwd,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return &i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET username = ?,
  email = ?,
  pwd = ?
WHERE id = ?
`

type UpdateUserParams struct {
	Username string    `json:"username"`
	Email    string    `json:"email"`
	Pwd      string    `json:"pwd"`
	ID       uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg *UpdateUserParams) error {
	_, err := q.exec(ctx, q.updateUserStmt, updateUser,
		arg.Username,
		arg.Email,
		arg.Pwd,
		arg.ID,
	)
	return err
}
